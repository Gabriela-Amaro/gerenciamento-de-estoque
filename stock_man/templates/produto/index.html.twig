{% extends 'base.html.twig' %}

{% block title %}Produtos{% endblock %}

{% block body %}
<style>
    .pl-10 {
       padding-left: 2.5rem;
    }
</style>

{# Mensagens de sucesso #}
{% for message in app.flashes('success') %}
    <div class="alert alert-success">
        {{ message }}
    </div>
{% endfor %}

{# Container principal #}
<div class="max-w-screen-xl mx-auto p-4">
    {# Container flexível #}
    <div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">
        {# Campo de pesquisa #}
        <div class="relative">
            <div class="absolute inset-y-0 left-0 p-2 rtl:inset-r-0 rtl:right-0 flex items-center ps-3 pointer-events-none">
                <svg class="w-5 h-5 text-gray-500 dark:text-gray-400" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>
            </div>
            <input type="text" 
                   id="table-search" 
                   name="search"
                   value="{{ app.request.query.get('search') }}"
                   class="block p-2 pl-10 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg w-80 bg-gray-50 focus:ring-gray-500 focus:border-gray-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-gray-500 dark:focus:border-gray-500" 
                   placeholder="Pesquisar por nome ou categoria">
        </div>
        {# Botão de cadastro #}
        <button data-modal-target="produto-modal" data-modal-toggle="produto-modal" class="py-2.5 px-5 me-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-300 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700" type="button">
            Cadastrar Produto
        </button>
        
        {# Include do Modal de cadastro de produtos #}
        {% include 'produto/_modal.html.twig' with {
            'titulo': 'Criar novo produto',
            'produtos': produtos,
            'categorias': categorias,
            'texto_botao': 'Adicionar Produto'

        } %}
        
    </div>

    {# Include da tabela de produtos #}
    {% include 'produto/_table.html.twig' with {
        'produtos': produtos,
        'currentPage': currentPage,
        'totalPages': totalPages,
        'total': total,
        'limit': limit
    } %}

</div>

<script>
    // Seleciona os elementos
    const openModalButton = document.querySelector('[data-modal-toggle="produto-modal"]');
    const modal = document.getElementById('produto-modal');
    const form = document.getElementById('criar-produto');
    const searchInput = document.getElementById('table-search');

    // Função para fechar o modal
    const fecharModal = () => {
        modal.classList.add('hidden');
        form.reset();
    }

    // Abre o modal ao clicar no botão
    openModalButton.addEventListener('click', () =>{
        modal.classList.remove('hidden');
    });

    // Fecha o modal ao clicar no botão "Close"
    const closeModalButton = modal.querySelector('[data-modal-toggle="produto-modal"]');
    closeModalButton.addEventListener('click', () => {
        fecharModal();
    });

    // Enviar dados do formulário
    form.addEventListener('submit', (event) => {
        event.preventDefault();

        // Coletar dados do formulário
        const objetoCriado = {
            nome: form.nome.value,
            categoria: form.categoria.value,
            descricao: form.descricao.value,
        };

        // Exibe no console e envia para o backend
        console.log("Objeto criado:", objetoCriado);
        enviarParaBackend(objetoCriado);

        // Fecha o modal
        fecharModal();
    });

    // Função ajax para atualizar a tabela
    const atualizarTabela = async (url) => {
        try {
            const response = await fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            const html = await response.text();
            
            // Atualizar apenas a tabela
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            
            const newTable = doc.querySelector('#table-produtos');
            const currentTable = document.querySelector('#table-produtos');
            
            if (newTable && currentTable) {
                currentTable.innerHTML = newTable.innerHTML;
            }
        } catch (error) {
            console.error('Erro ao atualizar tabela:', error);
            createFlashMessage('Erro ao atualizar a tabela.', 'error');
        }
    };

    // Função para pesquisar sem recarregar a página
    let timeoutId;
    searchInput.addEventListener('input', () => {
        clearTimeout(timeoutId);
        
        timeoutId = setTimeout(() => {
            const searchValue = searchInput.value.trim();
            
            // Atualiza a URL sem recarregar a página
            updateUrlParam('search', searchValue);
            updateUrlParam('page', '1');
            
            // Usa a função ajax para atualizar a tabela
            const url = `/produto?search=${encodeURIComponent(searchValue)}&page=1`;
            atualizarTabela(url);
        }, 200); 
    });

    // Envia dados ao backend
    const enviarParaBackend = (objeto) => {
        fetch("/produto", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(objeto),
        })
        .then(response => response.json())
        .then(data => {

            // Se criou com sucesso, atualiza apenas a tabela
            if (data.status === 'success') {
                // Reseta os parâmetros de busca e página
                updateUrlParam('search', '');
                updateUrlParam('page', '1');
                
                // Atualiza a tabela
                atualizarTabela('/produto?page=1');
                
                // Fecha o modal
                fecharModal();

                // Exibe a mensagem de sucesso
                createFlashMessage(data.message, data.status);
            }
        })
        .catch((error) => {
            console.error("Erro:", error);
            createFlashMessage('Erro ao processar a requisição.', 'error');
        });
    };

    // Função para atualizar a URL sem recarregar a página
    function updateUrlParam(key, value) {
        const url = new URL(window.location.href);
        if (value) {
            url.searchParams.set(key, value);
        } else {
            url.searchParams.delete(key);
        }
        window.history.pushState({}, '', url);
    }
</script>
{% endblock %}
